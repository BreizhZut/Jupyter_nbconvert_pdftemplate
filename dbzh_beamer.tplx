((= 
===========================================================================================
Name : dbzh_beamer
Author: D. P Tweed
Date : Feb, 2017
------------------------------

# Overview
------------------------------
This template is based on multiple original templates found in ~/anaconda/lib/python2.7/site-packages/nbconvert/templates/latex, namely
* base.tplx
* article.tplx
* style_ipython.tplx

# List of options and arguements:
-------------------------------

## To be applied in the notebook metadata


* Document metadata to change title, author, date and affiliation
 (see  'display_latex_metadata.tplx')

"latex_metadata": {
   "affiliation": "[Insert affiliation here]",
   "title": "[Insert title here]",
   "subtitle": "[Insert title here]",
   "author": "[Insert name here]",
   "date": "[Insert date here]",
   "abstract":"[Inset abstract here]",
   "keywords":"[Inset keywords here]",
   "bibfile":"[Insert file.bib]",
   "bibfile":"[Choose bibliography style]"s
}

## To be applied in the cell metadata

Only tables anf figures are displayed by default

* show input cell either code or Markdown 
"show":true

* frames
"beginframe":true start a new frame (requires "show":true)
"endframe":true end a new frame (requires "show":true)
"title":"[insert frame title here]" (set a title to the frame (requires "beginframe":true)

* block
"block":" " put the content of the Markdown cell in a block
"alert":" " put the content of the Markdown cell in an alert block
"example":" " put the content of the Markdown cell in an example block

* options for figure and table ('text/latex')
"width":"[either user defined maximum length or specified in cm, in...]"
"height":"[either user defined maximum height or specified in cm, in...]"
"caption":"[Insert caption here]",
"label":"[unique]"

* animations
"only":"[one number or two numbers seperated by -]" apply animation to
markdown cell figure or table

===========================================================================================
=))


((*- extends 'display_latex_metadata.tplx' -*))

%===============================================================================
% ABSTRACT OVERIDES: LATEX
%===============================================================================

((* block header *))
    ((= DOCUMENT CLASS: Change article to other class or change option [11pt] if needed =))
    ((* block docclass *))
\documentclass{beamer} % uncomment to switch to 16:9 screen ratio
% \documentclass[aspectratio=169]{beamer} % uncomment to switch to 16:9 screen ratio
%% change beamer theme here
\usetheme{Warsaw}
    ((* endblock docclass *))

    ((= LATEX PACKAGES: Add or remove as need some class may already call some packages =))
    ((* block packages *))
\usepackage[T1]{fontenc}
% Nicer default font than Computer Modern for most use cases
\usepackage{palatino}

% Basic figure setup, for now with no caption control since it's done
% automatically by Pandoc (which extracts ![](path) syntax from Markdown).
\usepackage{adjustbox} % Used to constrain images to a maximum size 
\usepackage{textcomp} % defines textquotesingle
% Hack from http://tex.stackexchange.com/a/47451/13684:
\AtBeginDocument{%
    \def\PYZsq{\textquotesingle}% Upright quotes in Pygmentized code
}
\usepackage{upquote} % Upright quotes for verbatim code
\usepackage{eurosym} % defines \euro
\usepackage{fancyvrb} % verbatim replacement that allows latex
\usepackage{grffile} % extends the file name processing of package graphics 
                     % to support a larger range 
\usepackage{booktabs}  % table support for pandoc > 1.12.2
\usepackage{jupyter_latex}  % contains command and colors definitions 
    ((* endblock packages *))

% Pygments definitions
((( resources.latex.pygments_definitions )))

    ((* block definitions *))
% DOCUMENT PARAMETERS: TITLE, AUTHOR, DATE
    ((* block title *))
((( get_shortlongtitle() ))) 
   ((* endblock title *))
   ((* block author *))
((( split_author_institute() )))
   ((* endblock author *))
   ((* block date *))
((( get_date() )))
    ((* endblock date *))
    ((* endblock definitions *))

    ((* block commands *))
% Prevent overflowing lines due to hard-to-break entities
\sloppy 
% Setup hyperref package
\hypersetup{
	breaklinks=true,  % so long urls are correctly broken across lines
  	colorlinks=true,
%      allcolors =.
       urlcolor=urlcolor,
       linkcolor=.,
       filecolor=.,
       citecolor=citecolor
}
\setlength{\capwidth}{\textwidth}
\setlength{\capsep}{0 pt}
    ((* block margins *))((* endblock margins *))
    ((* endblock commands *))
((* endblock header *))

((* block body *))
\beamertemplatenavigationsymbolsempty
\begin{document}

    ((* block predoc *))
    ((* block maketitle *))
\begin{frame}
  \titlepage
\end{frame}
    ((* endblock maketitle *))
    ((* block abstract *))((* endblock abstract *))
    ((* endblock predoc *))

((( super() )))

    ((* block postdoc *))
    ((= BIBLIOGRAPHY =))
\begin{frame}
\frametitle{bibliography}
((( make_biblio() )))
\end{frame}
    ((* endblock postdoc *))
\end{document}
((* endblock body *))

%===============================================================================
% SUPPORT BLOCKS
%===============================================================================

% Displaying simple data text
((* block data_text *))
\begin{stream}
((( output.data['text/plain'] )))
\end{stream}
((* endblock data_text *))

% Display python error text as-is
((* block error *))
\begin{stream}
	((( super() )))
\end{stream}
((* endblock error *))

((* block traceback_line *))
((( line | indent | strip_ansi | escape_latex )))
((* endblock traceback_line *))

% Display stream ouput with coloring
((* block stream *))
\begin{stream}
((( output.text | escape_latex | ansi2latex )))
\end{stream}
((* endblock stream *))

% Display latex
((* block data_latex -*))
((( output.data['text/latex'] | citation2latex | strip_files_prefix | markdown2latex )))
((* endblock data_latex *))

% Display markdown
((* block data_markdown -*))
((( output.data['text/markdown'] | citation2latex | strip_files_prefix | markdown2latex )))
((* endblock data_markdown *))

% Default mechanism for rendering figures
((*- block data_png -*))
((( draw_figure(output.metadata.filenames['image/png'],cell) )))
((*- endblock -*))
((*- block data_jpg -*))
((( draw_figure(output.metadata.filenames['image/jpeg'],cell) )))
((*- endblock -*))
((*- block data_svg -*))
((( draw_figure(output.metadata.filenames['image/svg+xml'],cell) )))
((*- endblock -*))
((*- block data_pdf -*))
((( draw_figure(output.metadata.filenames['application/pdf'],cell) )))
((*- endblock -*))

% Default code input
((* block input scoped *))
((* endblock input *))

% Default code output: redirect execute_result to display data priority.
((* block execute_result scoped *))
((( open_frame(cell) )))
((*- for type in output.data | filter_data_type -*))
    ((*- if type in ['text/plain']:*))
((=((( open_appear(cell) )))%crash with Verbatim =))
((( add_prompt(output.data['text/plain'] | escape_latex, cell) )))
((= ((( close_appear(cell) ))) %crash with Verbatim =)) 
    ((*- elif type in ['text/latex'] :*))
((( add_table(output.data['text/latex'],cell) )))
    ((*- endif -*))
((*- endfor -*))
((( close_frame(cell) )))
((* endblock execute_result *))


% Render markdown
((* block markdowncell scoped *))
((( add_markdown(cell) )))
((* endblock markdowncell *))

% Don't display unknown types
((* block unknowncell scoped *))
((* endblock unknowncell *))

%===============================================================================
% SUPPORT MACROS
%===============================================================================

% Draw a figure using the graphicx package.
((* macro draw_figure(filename,cell) -*))
((* set filename = filename | posix_path *))
((( open_frame(cell) )))
((*- block figure scoped -*))
((= set figure height =))
    ((*- if cell.metadata.height -*))
    ((* set figheight = cell.metadata.height *))
    ((*- else -*))
    ((* set figheight = '\\textheight' *))
    ((*- endif -*))
((= set figure width =))
     ((*- if cell.metadata.width -*))
     ((* set figwidth = cell.metadata.width *))
     ((*- else -*))
     ((* set figwidth = '\\textwidth' *))
     ((*- endif -*))

((*- if cell.metadata.label -*))
%\label{((( cell.metadata.label )))} % indicate page
\customlabel{((( cell.metadata.label )))}{silde {\thepage}}
((*- endif -*))
%
((( open_appear(cell) )))
\begin{figure}
((= insert rescaled image =))
\adjustimage{max size={(((figwidth)))}{(((figheight)))}}{((( filename )))}
((= insert caption and label =))
((( add_caption(cell) )))
\end{figure}
((*- endblock figure -*))
((( close_appear(cell) )))
((( close_frame(cell) )))
((*- endmacro *))

% Add a table
((* macro add_table(content,cell) -*))
((= set table height =))
    ((*- if cell.metadata.height -*))
    ((* set height = cell.metadata.height *))
    ((*- else -*))
    ((* set height = '\\textheight' *))
    ((*- endif -*))
((= set table width  =))
     ((*- if cell.metadata.width -*))
     ((* set width = cell.metadata.width *))
     ((*- else -*))
     ((* set width = '\\textwidth' *))
     ((*- endif -*))
((*- if cell.metadata.label: -*))
%
\customlabel{((( cell.metadata.label )))}{silde {\thepage}}
%\label{((( cell.metadata.label )))} % indicate page
((*- endif -*))
((( open_appear(cell) )))
%
\begin{table}
((= insert rescaled table =))
\centering
\adjustbox{max size={(((width)))}{(((height)))}}{(((content)))}
((= insert caption and label =))
((( add_caption(cell) )))
\end{table}
((( close_appear(cell) )))
((*- endmacro *))


% Create a caption and labels, applyed to figures and tables
((* macro add_caption(cell) -*))
((*- if cell.metadata.caption-*))
\caption{((( cell.metadata.caption)))}
((*- endif -*))
((*- endmacro *))

% Renders both input and output prompt in one block if ["show":true]
((* macro add_prompt(text,cell) -*))
\begin{coding}
((( cell.source |highlight_code(strip_verbatim=True)|add_prompts(first=">>> ",cont="... ") )))
((( text )))
\end{coding} 
%
((*- endmacro *))


% Add markdown content only id "show":true is used
((* macro add_markdown(cell) -*))
((*- if cell.metadata.show: -*))
((( open_frame(cell) )))
((( open_appear(cell) )))
((*- if cell.metadata.block: -*))
\begin{block}{(((cell.metadata.block)))}
((*-elif cell.metadata.alert: -*))
\begin{alertblock}{(((cell.metadata.alert)))}
((*- elif cell.metadata.example: -*))
\begin{exampleblock}{(((cell.metadata.example)))}
((*-endif -*))
((( cell.source | citation2latex | strip_files_prefix | markdown2latex )))
((*- if cell.metadata.block: -*))
%
\end{block}
((*- elif cell.metadata.alert: -*))
%
\end{alertblock}
((*- elif cell.metadata.example: -*))
%
\end{exampleblock}
((*-endif -*))
((( close_appear(cell) )))
((( close_frame(cell) )))
((*- endif -*))
((*- endmacro *))


((* macro open_frame(cell) -*))
((*- if cell.metadata.beginframe: -*))
% Begin frame
\begin{frame}[fragile]
((*- if cell.metadata.title -*))
% Frame title
\frametitle{(((cell.metadata.title)))} 
((*- endif -*))
((*- endif -*))
((*- endmacro *))

((* macro close_frame(cell) -*))
((*- if cell.metadata.endframe: -*))
%
\end{frame} 
((*- endif -*))
((*- endmacro *))

((* macro open_appear(cell) -*))
((*- if cell.metadata.only: -*))
%
\only<(((cell.metadata.only)))>{
((*- endif -*))     
((*- endmacro *))

((* macro close_appear(cell) -*))
((*- if cell.metadata.only: -*))
%
}
%
((*- endif -*))     
((* endmacro *))
